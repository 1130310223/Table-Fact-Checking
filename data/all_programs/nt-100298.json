[
  "2-1723516-7.html.csv", 
  "the #surface;[0, 3]# that wayne ferreira win #championship;[0, 2]# on most frequently be #clay;[15, 3]#", 
  0, 
  [
    "most_freq(        outcome  ...                                              score\n0   runner - up  ...                                      3 - 6 , 2 - 6\n1        winner  ...                                      6 - 3 , 6 - 4\n2   runner - up  ...      1 - 6 , 4 - 6 , 7 - 6 (7 - 5) , 6 - 2 , 1 - 6\n3        winner  ...                      6 - 2 , 6 - 7 (5 - 7) , 6 - 2\n4   runner - up  ...                              3 - 6 , 3 - 6 , 1 - 6\n5   runner - up  ...                                      3 - 6 , 4 - 6\n6        winner  ...                      6 - 4 , 6 - 7 (3 - 7) , 6 - 1\n7   runner - up  ...                              6 - 4 , 3 - 6 , 0 - 6\n8   runner - up  ...                      6 - 7 (5 - 7) , 6 - 7 (4 - 7)\n9        winner  ...                                      6 - 2 , 6 - 1\n10       winner  ...                                      6 - 0 , 7 - 5\n11       winner  ...              4 - 6 , 6 - 2 , 7 - 6 (9 - 7) , 6 - 3\n12       winner  ...                              7 - 6 (7 - 4) , 6 - 3\n13       winner  ...                                      6 - 3 , 6 - 3\n14       winner  ...                              7 - 5 , 7 - 6 (8 - 6)\n15       winner  ...                              3 - 6 , 6 - 4 , 6 - 3\n16       winner  ...                      7 - 6 (7 - 2) , 5 - 7 , 6 - 3\n17       winner  ...                              2 - 6 , 6 - 3 , 6 - 3\n18  runner - up  ...                                      2 - 6 , 4 - 6\n19       winner  ...                                      6 - 2 , 6 - 4\n20  runner - up  ...                              6 - 7 (5 - 7) , 5 - 7\n21       winner  ...  7 - 6 (8 - 6) , 3 - 6 , 6 - 7 (5 - 7) , 7 - 6 ...\n22       winner  ...                              6 - 3 , 4 - 6 , 7 - 5\n\n[23 rows x 6 columns], surface)=hard;eq(hard, clay)=False", 
    "hop(last(all_rows), surface)=hard;eq(hard, clay)=False", 
    "hop(first(all_rows), surface)=hard (i);eq(hard (i), clay)=False", 
    "count(all_rows)=23;count(filter_str_eq(all_rows, surface, clay))=2;less(23, 2);less(23, 2)=False", 
    "count(all_rows)=23;count(filter_str_eq(all_rows, surface, clay))=2;eq(23, 2)=False", 
    "hop(last(last(all_rows)), surface)=hard;eq(hard, clay)=False", 
    "hop(first(last(all_rows)), surface)=hard;eq(hard, clay)=False", 
    "hop(last(first(all_rows)), surface)=hard (i);eq(hard (i), clay)=False", 
    "hop(first(first(all_rows)), surface)=hard (i);eq(hard (i), clay)=False", 
    "hop(last(filter_str_eq(all_rows, surface, clay)), surface)=clay;eq(clay, clay)=True", 
    "hop(first(filter_str_eq(all_rows, surface, clay)), surface)=clay;eq(clay, clay)=True", 
    "most_freq(        outcome  ...                                              score\n0   runner - up  ...                                      3 - 6 , 2 - 6\n1        winner  ...                                      6 - 3 , 6 - 4\n2   runner - up  ...      1 - 6 , 4 - 6 , 7 - 6 (7 - 5) , 6 - 2 , 1 - 6\n3        winner  ...                      6 - 2 , 6 - 7 (5 - 7) , 6 - 2\n4   runner - up  ...                              3 - 6 , 3 - 6 , 1 - 6\n5   runner - up  ...                                      3 - 6 , 4 - 6\n6        winner  ...                      6 - 4 , 6 - 7 (3 - 7) , 6 - 1\n7   runner - up  ...                              6 - 4 , 3 - 6 , 0 - 6\n8   runner - up  ...                      6 - 7 (5 - 7) , 6 - 7 (4 - 7)\n9        winner  ...                                      6 - 2 , 6 - 1\n10       winner  ...                                      6 - 0 , 7 - 5\n11       winner  ...              4 - 6 , 6 - 2 , 7 - 6 (9 - 7) , 6 - 3\n12       winner  ...                              7 - 6 (7 - 4) , 6 - 3\n13       winner  ...                                      6 - 3 , 6 - 3\n14       winner  ...                              7 - 5 , 7 - 6 (8 - 6)\n15       winner  ...                              3 - 6 , 6 - 4 , 6 - 3\n16       winner  ...                      7 - 6 (7 - 2) , 5 - 7 , 6 - 3\n17       winner  ...                              2 - 6 , 6 - 3 , 6 - 3\n18  runner - up  ...                                      2 - 6 , 4 - 6\n19       winner  ...                                      6 - 2 , 6 - 4\n20  runner - up  ...                              6 - 7 (5 - 7) , 5 - 7\n21       winner  ...  7 - 6 (8 - 6) , 3 - 6 , 6 - 7 (5 - 7) , 7 - 6 ...\n22       winner  ...                              6 - 3 , 4 - 6 , 7 - 5\n\n[23 rows x 6 columns], surface)=hard;hop(last(filter_str_eq(all_rows, surface, clay)), surface)=clay;eq(clay, hard)=False", 
    "most_freq(        outcome  ...                                              score\n0   runner - up  ...                                      3 - 6 , 2 - 6\n1        winner  ...                                      6 - 3 , 6 - 4\n2   runner - up  ...      1 - 6 , 4 - 6 , 7 - 6 (7 - 5) , 6 - 2 , 1 - 6\n3        winner  ...                      6 - 2 , 6 - 7 (5 - 7) , 6 - 2\n4   runner - up  ...                              3 - 6 , 3 - 6 , 1 - 6\n5   runner - up  ...                                      3 - 6 , 4 - 6\n6        winner  ...                      6 - 4 , 6 - 7 (3 - 7) , 6 - 1\n7   runner - up  ...                              6 - 4 , 3 - 6 , 0 - 6\n8   runner - up  ...                      6 - 7 (5 - 7) , 6 - 7 (4 - 7)\n9        winner  ...                                      6 - 2 , 6 - 1\n10       winner  ...                                      6 - 0 , 7 - 5\n11       winner  ...              4 - 6 , 6 - 2 , 7 - 6 (9 - 7) , 6 - 3\n12       winner  ...                              7 - 6 (7 - 4) , 6 - 3\n13       winner  ...                                      6 - 3 , 6 - 3\n14       winner  ...                              7 - 5 , 7 - 6 (8 - 6)\n15       winner  ...                              3 - 6 , 6 - 4 , 6 - 3\n16       winner  ...                      7 - 6 (7 - 2) , 5 - 7 , 6 - 3\n17       winner  ...                              2 - 6 , 6 - 3 , 6 - 3\n18  runner - up  ...                                      2 - 6 , 4 - 6\n19       winner  ...                                      6 - 2 , 6 - 4\n20  runner - up  ...                              6 - 7 (5 - 7) , 5 - 7\n21       winner  ...  7 - 6 (8 - 6) , 3 - 6 , 6 - 7 (5 - 7) , 7 - 6 ...\n22       winner  ...                              6 - 3 , 4 - 6 , 7 - 5\n\n[23 rows x 6 columns], surface)=hard;hop(first(filter_str_eq(all_rows, surface, clay)), surface)=clay;eq(clay, hard)=False", 
    "most_freq(        outcome  ...                                              score\n0   runner - up  ...                                      3 - 6 , 2 - 6\n1        winner  ...                                      6 - 3 , 6 - 4\n2   runner - up  ...      1 - 6 , 4 - 6 , 7 - 6 (7 - 5) , 6 - 2 , 1 - 6\n3        winner  ...                      6 - 2 , 6 - 7 (5 - 7) , 6 - 2\n4   runner - up  ...                              3 - 6 , 3 - 6 , 1 - 6\n5   runner - up  ...                                      3 - 6 , 4 - 6\n6        winner  ...                      6 - 4 , 6 - 7 (3 - 7) , 6 - 1\n7   runner - up  ...                              6 - 4 , 3 - 6 , 0 - 6\n8   runner - up  ...                      6 - 7 (5 - 7) , 6 - 7 (4 - 7)\n9        winner  ...                                      6 - 2 , 6 - 1\n10       winner  ...                                      6 - 0 , 7 - 5\n11       winner  ...              4 - 6 , 6 - 2 , 7 - 6 (9 - 7) , 6 - 3\n12       winner  ...                              7 - 6 (7 - 4) , 6 - 3\n13       winner  ...                                      6 - 3 , 6 - 3\n14       winner  ...                              7 - 5 , 7 - 6 (8 - 6)\n15       winner  ...                              3 - 6 , 6 - 4 , 6 - 3\n16       winner  ...                      7 - 6 (7 - 2) , 5 - 7 , 6 - 3\n17       winner  ...                              2 - 6 , 6 - 3 , 6 - 3\n18  runner - up  ...                                      2 - 6 , 4 - 6\n19       winner  ...                                      6 - 2 , 6 - 4\n20  runner - up  ...                              6 - 7 (5 - 7) , 5 - 7\n21       winner  ...  7 - 6 (8 - 6) , 3 - 6 , 6 - 7 (5 - 7) , 7 - 6 ...\n22       winner  ...                              6 - 3 , 4 - 6 , 7 - 5\n\n[23 rows x 6 columns], championship)=queen 's club , uk;hop(last(filter_str_eq(all_rows, surface, clay)), championship)=munich , germany;eq(munich , germany, queen 's club , uk)=False", 
    "most_freq(        outcome  ...                                              score\n0   runner - up  ...                                      3 - 6 , 2 - 6\n1        winner  ...                                      6 - 3 , 6 - 4\n2   runner - up  ...      1 - 6 , 4 - 6 , 7 - 6 (7 - 5) , 6 - 2 , 1 - 6\n3        winner  ...                      6 - 2 , 6 - 7 (5 - 7) , 6 - 2\n4   runner - up  ...                              3 - 6 , 3 - 6 , 1 - 6\n5   runner - up  ...                                      3 - 6 , 4 - 6\n6        winner  ...                      6 - 4 , 6 - 7 (3 - 7) , 6 - 1\n7   runner - up  ...                              6 - 4 , 3 - 6 , 0 - 6\n8   runner - up  ...                      6 - 7 (5 - 7) , 6 - 7 (4 - 7)\n9        winner  ...                                      6 - 2 , 6 - 1\n10       winner  ...                                      6 - 0 , 7 - 5\n11       winner  ...              4 - 6 , 6 - 2 , 7 - 6 (9 - 7) , 6 - 3\n12       winner  ...                              7 - 6 (7 - 4) , 6 - 3\n13       winner  ...                                      6 - 3 , 6 - 3\n14       winner  ...                              7 - 5 , 7 - 6 (8 - 6)\n15       winner  ...                              3 - 6 , 6 - 4 , 6 - 3\n16       winner  ...                      7 - 6 (7 - 2) , 5 - 7 , 6 - 3\n17       winner  ...                              2 - 6 , 6 - 3 , 6 - 3\n18  runner - up  ...                                      2 - 6 , 4 - 6\n19       winner  ...                                      6 - 2 , 6 - 4\n20  runner - up  ...                              6 - 7 (5 - 7) , 5 - 7\n21       winner  ...  7 - 6 (8 - 6) , 3 - 6 , 6 - 7 (5 - 7) , 7 - 6 ...\n22       winner  ...                              6 - 3 , 4 - 6 , 7 - 5\n\n[23 rows x 6 columns], championship)=queen 's club , uk;hop(first(filter_str_eq(all_rows, surface, clay)), championship)=stuttgart outdoor , germany;eq(stuttgart outdoor , germany, queen 's club , uk)=False", 
    "count(all_rows)=23;count(last(filter_str_eq(all_rows, surface, clay)))=1;less(23, 1);less(23, 1)=False", 
    "count(all_rows)=23;count(last(filter_str_eq(all_rows, surface, clay)))=1;eq(23, 1)=False", 
    "count(all_rows)=23;count(first(filter_str_eq(all_rows, surface, clay)))=1;less(23, 1);less(23, 1)=False", 
    "count(all_rows)=23;count(first(filter_str_eq(all_rows, surface, clay)))=1;eq(23, 1)=False", 
    "count(filter_str_eq(all_rows, surface, clay))=2;count(last(all_rows))=1;less(2, 1);less(2, 1)=False", 
    "count(filter_str_eq(all_rows, surface, clay))=2;count(last(all_rows))=1;eq(2, 1)=False", 
    "count(filter_str_eq(all_rows, surface, clay))=2;count(last(filter_str_eq(all_rows, surface, clay)))=1;less(2, 1);less(2, 1)=False", 
    "count(filter_str_eq(all_rows, surface, clay))=2;count(last(filter_str_eq(all_rows, surface, clay)))=1;eq(2, 1)=False", 
    "count(filter_str_eq(all_rows, surface, clay))=2;count(first(all_rows))=1;less(2, 1);less(2, 1)=False", 
    "count(filter_str_eq(all_rows, surface, clay))=2;count(first(all_rows))=1;eq(2, 1)=False", 
    "count(filter_str_eq(all_rows, surface, clay))=2;count(first(filter_str_eq(all_rows, surface, clay)))=1;less(2, 1);less(2, 1)=False", 
    "count(filter_str_eq(all_rows, surface, clay))=2;count(first(filter_str_eq(all_rows, surface, clay)))=1;eq(2, 1)=False"
  ]
]